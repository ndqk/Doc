- abstract class 239 [**8]
- abstract data type 207 [**7]
- abstract data type design 476 [**14]
- abstract factory design pattern 244 [**8]
- abstract initial state 389 [**12]
- abstract method 239 [**8]
- abstract noun 411 [**13]
- abstraction 201 [**7]
- acceptance testing 535 [**15]
- acceptance testing 7 [**1]
- acceptance testing 86 [**3]
- accessor 482 [**14]
- accidental reuse 226 [**8]
- action 582 [**17]
- activation box 579 [**17]
- activity 137 [**5]
- activity 283 [**9]
- activity 311 [**10]
- activity 582 [**17]
- activity diagram 583 [**17]
- actor 318 [**11]
- actor 407 [**13]
- actor 577 [**17]
- adapter design pattern 239 [**8]
- adaptive maintenance 553 [**16]
- adaptive maintenance 8 [**1]
- advice 591 [**18]
- aggregate 241 [**8]
- aggregation 213 [**7]
- aggregation 573 [**17]
- agile process 60 [**2]
- algorithmic cost estimation model 277 [**9]
- all-defi nition-use-path coverage 526 [**15]
- alpha release 86 [**3]
- ambiguity 81 [**3]
- analysis phase 7 [**1]
- analysis workflow 303, 307 [**10]
- analysis workflow 405 [**13]
- analysis workflow 44 [**2]
- analysis workflow 80 [**3]
- Anna 392 [**12]
- application composition model 281 [**9]
- application domain 314 [**11]
- application domain 78 [**3]
- application framework 234 [**8]
- application programming interface (API) 227 [**8]
- architect 486 [**14]
- architectural design 466 [**14]
- architectural design 7 [**1]
- architectural design 82 [**3]
- architecture 49 [**2]
- architecture pattern 237 [**8]
- artifact 18 [**1]
- artifact 41 [**2]
- aspect 591 [**18]
- aspect-oriented programming (AOP) 230 [**7]
- aspect-oriented programming (AOP) 591 [**18]
- aspect-oriented programming language 592 [**18]
- aspect-oriented software development (AOSD) 593 [**18]
- association 214 [**7]
- association 576 [**17]
- association class 577 [**17]
- assumptions 131 [**5]
- attribute 25 [**1]
- attribute 411 [**13]
- back-end tool 136 [**5]
- backtrack 430 [**13]
- backup programmer 111 [**4]
- bag 383 [**12]
- baseline 145 [**5]
- baseline 284 [**9]
- baseline 309 [**10]
- baseline 41 [**2]
- behavioral design patterns 246 [**8]
- behavioral testing 517 [**15]
- beta release 86 [**3]
- binding 186 [**7]
- black-box testing 517 [**15]
- bottom-up approach 277 [**9]
- bottom-up integration 513 [**15]
- boundary class 405 [**13]
- boundary value analysis 521 [**15]
- branch coverage 526 [**15]
- bridge design pattern 240 [**8]
- Brooks’s Law 108 [**4]
- browser 138 [**5]
- budget 82 [**3]
- bug 25 [**1]
- build tool 146 [**5]
- build tool 309 [**10]
- business case 79 [**3]
- business logic tier 237 [**8]
- business model 316 [**11]
- business model 89 [**3]
- capability maturity model (CMM) 95 [**3]
- CASE 124 [**5]
- CASE 308 [**10]
- chief programmer 111 [**4]
- chief programmer team 110 [**4]
- class 211 [**7]
- class 82 [**3]
- class diagram 411 [**13]
- class diagram 476 [**14]
- class diagram 572 [**17]
- classical paradigm 18 [**1]
- class–responsibility–collaboration (CRC) cards 413 [**13]
- Cleanroom 529 [**15]
- clickware 23 [**1]
- client 23 [**1]
- COBOL program logic structure 230 [**8]
- COCOMO 278 [**9]
- COCOMO II 281 [**9]
- code artifact 516 [**15]
- code artifact 83 [**3]
- code-and-fix life-cycle model 52 [**2]
- coding 7 [**1]
- coding standards 509 [**15]
- coding tool 138 [**5]
- cohesion 186 [**7]
- cohesion 310 [**10]
- coincidental cohesion 187 [**7]
- collaboration diagram 580 [**17]
- collection 241 [**8]
- commercial-off-the-shelf (COTS) software 23 [**1]
- common coupling 193 [**7]
- Communicating Sequential Processes (CSP) 392 [**12]
- communication diagram 435 [**13]
- communication diagram 580 [**17]
- communicational cohesion 190 [**7]
- complexity 527 [**15]
- component 516 [**15]
- component 83 [**3]
- component diagram 586 [**17]
- component-based software engineering 237 [**8]
- component-based technology 594 [**18]
- composing 594 [**18]
- composition 575 [**17]
- composition 592 [**18]
- computer-aided software engineering 308 [**10]
- concept exploration 79 [**3]
- concern 591 [**18]
- cone of uncertainty 269 [**9]
- confi guration 143 [**5]
- confi guration 309 [**10]
- confi guration control 145 [**5]
- confi guration-control tool 145 [**5]
- confi guration-control tool 309 [**10]
- consistency checker 136 [**5]
- consistent variable names 504 [**15]
- constraint 360 [**12]
- construction phase 92 [**3]
- container 241 [**8]
- content coupling 192 [**7]
- context 186 [**7]
- contract software 23 [**1]
- contradiction 81 [**3]
- control class 406 [**13]
- control coupling 195 [**7]
- core asset 236 [**8]
- core concern 591 [**18]
- core group 57 [**2]
- core workflow 44 [**2]
- core workflow 78 [**3]
- core workflows 303 [**10]
- corrective maintenance 553 [**16]
- corrective maintenance 8 [**1]
- correctness 166 [**6]
- correctness proof 167 [**6]
- cost 271 [**9]
- cost 79 [**3]
- cost estimate 271 [**9]
- cost estimate 311 [**10]
- cost–benefit analysis 130 [**5]
- cost–benefit analysis 308 [**10]
- coupling 186 [**7]
- coupling 310 [**10]
- creational design patterns 245 [**8]
- cross-cutting concern 591 [**18]
- cursor 241 [**8]
- cyclomatic complexity 491 [**14]
- cyclomatic complexity 527 [**15]
- dancing pigs problem 598 [**18]
- data abstraction 202 [**7]
- data access logic tier 237 [**8]
- data coupling 196 [**7]
- data coupling 310 [**10]
- data dictionary 136 [**5]
- data dictionary 308 [**10]
- data encapsulation 201 [**7]
- data fl ow 365 [**12]
- data fl ow analysis (DFA) 467 [**14]
- data fl ow diagram (DFD) 365 [**12]
- data immediate-access diagram (DIAD) 370 [**12]
- data store 365 [**12]
- data-driven testing 517 [**15]
- data-oriented design 465 [**14]
- deadline 79 [**3]
- debugging 533 [**15]
- defect 155 [**6]
- defect 25 [**1]
- defect 309 [**10]
- defect 554 [**16]
- defect report 557 [**16]
- defect-tracking tool 565 [**16]
- defensive programming 512 [**15]
- defined level 96 [**3]
- deliberate reuse 226 [**8]
- deliverable 82 [**3]
- Delphi technique 276 [**9]
- democratic team 109 [**4]
- deployment diagram 586 [**17]
- derivation 144 [**5]
- design by contract 20 [**1]
- design document 7 [**1]
- design pattern 235 [**8]
- design phase 7 [**1]
- design workfl ow 483 [**14]
- design workflow 303, 307 [**10]
- design workflow 44 [**2]
- design workflow 82 [**3]
- desk check 175 [**6]
- detailed design 466 [**14]
- detailed design 7 [**1]
- detailed design 82 [**3]
- developer 23 [**1]
- development-then-maintenance model 9 [**1]
- direct observation 317 [**11]
- discriminator 576 [**17]
- divide-and-conquer 132 [**5]
- documentation 291 [**9]
- documentation phase 17 [**1]
- domain 314 [**11]
- domain 78 [**3]
- driver 240 [**8]
- driver 511 [**15]
- duration 282 [**9]
- duration estimate 271 [**9]
- duration estimate 311 [**10]
- dynamic binding 216 [**7]
- dynamic modeling 406 [**13]
- e-mail 138 [**5]
- early aspects 593 [**18]
- early design model 281 [**9]
- efficiency 273 [**9]
- egoless programming 109 [**4]
- elaboration phase 91 [**3]
- element access 241 [**8]
- element traversal 241 [**8]
- enable 384 [**12]
- encapsulation 20 [**1]
- encapsulation 202 [**7]
- encapsulation 560 [**16]
- end-user programming 503 [**15]
- enhancement 8 [**1]
- entity class 405 [**13]
- entity class modeling 406 [**13]
- entity-relationship modeling (ERM) 374 [**12]
- environment 137 [**5]
- environment 309 [**10]
- environment 538 [**15]
- equivalence class 521 [**15]
- error 155 [**6]
- error 25 [**1]
- error 309 [**10]
- ethics 26 [**1]
- event 377 [**12]
- event 431 [**13]
- event 581 [**17]
- evolution 552 [**16]
- evolution-tree life-cycle model 40 [**2]
- exception scenario 408 [**13]
- execution-based testing 163 [**6]
- execution-based testing 516 [**15]
- expert judgment by analogy 276 [**9]
- extend relationship 578 [**17]
- extended finite state machine 378 [**12]
- external cost 271 [**9]
- extreme programming 59 [**2]
- failure 155 [**6]
- failure 25 [**1]
- failure 309 [**10]
- failure report 57 [**2]
- fan-in 491 [**14]
- fan-out 491 [**14]
- fault 155 [**6]
- fault 25 [**1]
- fault 309 [**10]
- fault density 162 [**6]
- fault detection efficiency 162 [**6]
- fault detection rate 162 [**6]
- fault report 57 [**2]
- feature creep 43 [**2]
- FFP metric 273 [**9]
- fi rst-generation language 501 [**15]
- field 25 [**1]
- final state 377 [**12]
- finite state machine (FSM) 376 [**12]
- fl ow of events 440 [**13]
- fl owchart cohesion 190 [**7]
- follow-up 160 [**6]
- fork 584 [**17]
- form 317 [**11]
- formal specifi cation 376 [**12]
- formatter 138 [**5]
- forward engineering 563 [**16]
- fourth-generation language (4GL) 501 [**15]
- fragile base class problem 219 [**7]
- fragile base class problem 562 [**16]
- framework 234 [**8]
- freeze 145 [**5]
- freeze 62 [**2]
- front-end tool 135 [**5]
- function point (FP) 273 [**9]
- functional analysis 523 [**15]
- functional cohesion 190 [**7]
- functional modeling 406 [**13]
- functional module 230 [**8]
- functional requirement 320 [**11]
- functional testing 517 [**15]
- general design 466 [**14]
- generalization 213 [**7]
- generalization 576 [**17]
- Gist 392 [**12]
- given set 388 [**12]
- glass-box testing 517 [**15]
- glossary 315 [**11]
- good programming practice 504 [**15]
- graphical user interface (GUI) 350 [**11]
- guard 580 [**17]
- guillemets 578 [**17]
- hierarchy 111 [**4]
- high-level design 466 [**14]
- horizontal schema definition 389 [**12]
- hot spot 234 [**8]
- human factors 350 [**11]
- Hungarian Naming Conventions 505 [**15]
- IEEE software project management plan 286 [**9]
- implementation phase 7 [**1]
- implementation workfl ow 516 [**15]
- implementation workflow 303, 307 [**10]
- implementation workflow 44 [**2]
- implementation workflow 83 [**3]
- inception phase 89 [**3]
- include relationship 578 [**17]
- incompleteness 81 [**3]
- incrementation 303 [**10]
- incrementation 44 [**2]
- informal specification 362 [**12]
- information hiding 209 [**7]
- information hiding 310 [**10]
- informational cohesion 191 [**7]
- inheritance 211 [**7]
- inheritance 562 [**16]
- inhibitor arc 385 [**12]
- initial level 95 [**3]
- initial state 377 [**12]
- input 377 [**12]
- input function 383 [**12]
- input/output-driven testing 517 [**15]
- inspection 159 [**6]
- inspection 309 [**10]
- inspection rate 162 [**6]
- instance variable 25 [**1]
- integrated environment 538 [**15]
- integration 510 [**15]
- integration 7 [**1]
- integration testing 535 [**15]
- integration testing 86 [**3]
- interaction diagram 435 [**13]
- interaction diagram 579 [**17]
- interactive source-level debugger 140 [**5]
- internal cost 271 [**9]
- internal software development 23 [**1]
- International Organization for Standardization (ISO) 98 [**3]
- isA relationship 213 [**7]
- ISO 9000-3 98 [**3]
- ISO 9001 98 [**3]
- ISO/IEC 15504 99 [**3]
- iteration 303 [**10]
- iteration 44 [**2]
- iterative-and-incremental life-cycle model 303 [**10]
- iterative-and-incremental life-cycle model 44 [**2]
- iterator 241 [**8]
- iterator design pattern 241 [**8]
- i«include » relationship 335 [**11]
- join 584 [**17]
- key process area (KPA) 119 [**4]
- key process area (KPA) 98 [**3]
- learning curve 219 [**7]
- legacy system 405 [**13]
- legacy system 563 [**16]
- length 491 [**14]
- librarian 112 [**4]
- life cycle 301 [**10]
- life cycle 6 [**1]
- life-cycle model 301 [**10]
- life-cycle model 40 [**2]
- life-cycle model 6 [**1]
- linear code sequences 526 [**15]
- lines of code (LOC) 272 [**9]
- Linus’s Law 23 [**1]
- logic 186 [**7]
- logic artifact 511 [**15]
- logic-driven testing 517 [**15]
- logical cohesion 188 [**7]
- logical data flow 365 [**12]
- logical design 466 [**14]
- lookahead 129 [**5]
- loop invariant 169 [**6]
- low-level design 466 [**14]
- lowerCASE tool 136 [**5]
- maintenance 10 [**1]
- managed level 96 [**3]
- managerial independence 156 [**6]
- marked Petri net 384 [**12]
- marking 384 [**12]
- maturity 95 [**3]
- mean time between failures 164 [**6]
- mean time to repair 164 [**6]
- meaningful variable names 504 [**15]
- member function 26 [**1]
- message 19 [**1]
- method 19 [**1]
- method-based environment 539 [**15]
- methodology 24 [**1]
- metric 308 [**10]
- metrics 133 [**5]
- milestone 284 [**9]
- milestone 311 [**10]
- milestone 82 [**3]
- millennium bug 405 [**13]
- Miller’s Law 303 [**10]
- Miller’s Law 44 [**2]
- mistake 155 [**6]
- mistake 25 [**1]
- mistake 309 [**10]
- mitigate risk 63 [**2]
- model 306 [**10]
- model 318 [**11]
- model 40 [**2]
- model 76 [**3]
- model checking 174 [**6]
- model-driven architecture (MDA) 259 [**8]
- model-driven architecture (MDA) 593 [**18]
- model-view-controller (MVC) architecture pattern 237 [**8]
- moderator 160 [**6]
- modular design 466 [**14]
- module 184 [**7]
- module 7 [**1]
- module 82 [**3]
- money 284 [**9]
- money 311 [**10]
- moving-target problem 302 [**10]
- moving-target problem 43 [**2]
- moving-target problem 559 [**16]
- multiplicity 574 [**17]
- multiset 383 [**12]
- mutator 482 [**14]
- natural language 362 [**12]
- navigation triangle 214 [**7]
- negotiation 354 [**11]
- nominal effort 278 [**9]
- non-execution-based testing 157 [**6]
- non-execution-based testing 516 [**15]
- nonfunctional requirement 320 [**11]
- nonprocedural 502 [**15]
- normal scenario 408 [**13]
- not invented here (NIH) syndrome 228 [**8]
- note 213 [**7]
- note 577 [**17]
- noun-extraction method 411 [**13]
- object 211 [**7]
- object-oriented analysis (OOA) 404 [**13]
- object-oriented design (OOD) 476 [**14]
- object-oriented paradigm 25 [**1]
- online documentation 138 [**5]
- online interface checker 139 [**5]
- open-source software 23 [**1]
- open-source software 56 [**2]
- operating system front end 140 [**5]
- operation 186 [**7]
- operation 390 [**12]
- operation-oriented design 465 [**14]
- operational artifact 511 [**15]
- operational definition (of maintenance) 10 [**1]
- opportunistic reuse 226 [**8]
- optimizing level 96 [**3]
- output function 383 [**12]
- overview 159 [**6]
- package 486 [**14]
- package 585 [**17]
- pair programming 118 [**4]
- pair programming 59 [**2]
- paradigm 24 [**1]
- part–whole relationship 573 [**17]
- path coverage 526 [**15]
- path-oriented testing 517 [**15]
- perfective maintenance 553 [**16]
- perfective maintenance 8 [**1]
- performance 165 [**6]
- peripheral group 57 [**2]
- Petri net 383 [**12]
- phase 6 [**1]
- physical design 466 [**14]
- place 383 [**12]
- planning 268 [**9]
- planning phase 16 [**1]
- platform constraint 320 [**11]
- point and click 350 [**11]
- point of highest abstraction of input 467 [**14]
- point of highest abstraction of output 467 [**14]
- pointcut 591 [**18]
- polymorphism 216 [**7]
- portable 226 [**8]
- portable common tool environment (PCTE) 540 [**15]
- postarchitecture model 281 [**9]
- postdelivery maintenance 551 [**16]
- postdelivery maintenance 7 [**1]
- predicate 377 [**12]
- preparation 159 [**6]
- presentation logic tier 237 [**8]
- pretty printer 138 [**5]
- price 271 [**9]
- private workspace 145 [**5]
- procedural 502 [**15]
- procedural abstraction 202 [**7]
- procedural cohesion 189 [**7]
- process 365 [**12]
- process 5 [**1]
- process integration 538 [**15]
- process metric 133 [**5]
- product 24 [**1]
- product metric 133 [**5]
- product testing 535 [**15]
- product testing 86 [**3]
- productivity 273 [**9]
- program 24 [**1]
- program description language (PDL) 471 [**14]
- programmer 112 [**4]
- programming secretary 112 [**4]
- programming-in-the-large 138 [**5]
- programming-in-the-many 138 [**5]
- programming-in-the-many 498 [**15]
- programming-in-the-small 138 [**5]
- project function 283 [**9]
- project function 311 [**10]
- project management workbench 309 [**10]
- prologue comments 506 [**15]
- proof-of-concept prototype 63 [**2]
- property 25 [**1]
- pseudocode 471 [**14]
- PSL/PSA 373 [**12]
- quality 156 [**6]
- quality 17 [**1]
- quality 309 [**10]
- quality requirement 320 [**11]
- questionnaire 317 [**11]
- rapid prototype 348 [**11]
- rapid prototype 55 [**2]
- rapid-prototyping life-cycle model 55 [**2]
- Rayleigh distribution 282 [**9]
- reader 160 [**6]
- real-time software 488 [**14]
- realize (in the Unified Theory context) 435 [**13]
- recorder 160 [**6]
- reengineering 563 [**16]
- refactoring 564 [**16]
- refactoring 60 [**2]
- regression fault 20 [**1]
- regression fault 43 [**2]
- regression fault 554 [**16]
- regression testing 176 [**6]
- regression testing 554 [**16]
- regression testing 87 [**3]
- reliability 164 [**6]
- reliability 320 [**11]
- reliability 79 [**3]
- reliable 520 [**15]
- repeatable level 96 [**3]
- report generator 136 [**5]
- report generator 308 [**10]
- requirements analysis 315 [**11]
- requirements capture 315 [**11]
- requirements elicitation 315 [**11]
- requirements engineering 315 [**11]
- requirements phase 7 [**1]
- requirements workfl ow 303, 307 [**10]
- requirements workflow 314 [**11]
- requirements workflow 44 [**2]
- requirements workflow 78 [**3]
- requirements, analysis, and design workbench 309 [**10]
- resources 282 [**9]
- resources 310 [**10]
- response time 320 [**11]
- responsibility-driven design 20 [**1]
- responsibility-driven design 408 [**13]
- responsibility-driven design 477 [**14]
- restructuring 564 [**16]
- retirement 8 [**1]
- retirement 88 [**3]
- return 580 [**17]
- reuse 226 [**8]
- reuse 310 [**10]
- reverse engineering 563 [**16]
- review 284 [**9]
- review 309 [**10]
- reviews 311 [**10]
- revision 141 [**5]
- rework 160 [**6]
- risk 50 [**2]
- robustness 165 [**6]
- robustness 49 [**2]
- role 457 [**13]
- SADT 374 [**12]
- sandwich integration 514 [**15]
- scenario 406 [**13]
- schema 388 [**12]
- screen generator 136 [**5]
- screen generator 308 [**10]
- second-generation language 501 [**15]
- self-call 580 [**17]
- self-documenting code 505 [**15]
- semiformal specification 373 [**12]
- send a message 26 [**1]
- separation of concerns 132 [**5]
- separation of concerns 591 [**18]
- sequence diagram 435 [**13]
- sequence diagram 579 [**17]
- service 595 [**18]
- service consumers 595 [**18]
- service providers 595 [**18]
- shrink-wrapped software 23 [**1]
- simulator 164 [**6]
- social computing 596 [**18]
- software 24 [**1]
- software architecture 236 [**8]
- software crisis 4 [**1]
- software depression 5 [**1]
- software development effort multipliers (SPMP) 278 [**9]
- software engineering 2 [**1]
- software product line 236 [**8]
- software project management plan 310 [**10]
- software project management plan 7 [**1]
- software quality assurance (SQA) 156 [**6]
- software quality assurance (SQA) 309 [**10]
- software repair 8 [**1]
- solution strategy 361 [**12]
- source computer 250 [**8]
- source or destination of data 365 [**12]
- source-level debugger 140 [**5]
- specialization 111 [**4]
- specialization 213 [**7]
- specification document 360 [**12]
- specification document 456 [**13]
- specification document 7 [**1]
- specification phase 7 [**1]
- SPICE 99 [**3]
- spiral life-cycle model 63 [**2]
- spreadsheet 138 [**5]
- SREM 374 [**12]
- stabilize 62 [**2]
- stamp coupling 195 [**7]
- stand-up meeting 60 [**2]
- state 377 [**12]
- state 418 [**13]
- state definition 388 [**12]
- state transition diagram (STD) 376 [**12]
- state variable 25 [**1]
- state variable 418 [**13]
- statechart 414 [**13]
- statechart 581 [**17]
- statement coverage 526 [**15]
- static method 515 [**15]
- stepwise refi nement 303 [**10]
- stepwise refinement 124 [**5]
- stepwise refinement 44 [**2]
- stereotype 406 [**13]
- stereotype 578 [**17]
- story 59 [**2]
- strength 186 [**7]
- stress testing 536 [**15]
- structural analysis (SA) 374 [**12]
- structural design patterns 245 [**8]
- structural test 526 [**15]
- structural testing 517 [**15]
- structure editor 138 [**5]
- structured interview 316 [**11]
- structured paradigm 18 [**1]
- structured systems analysis 365 [**12]
- structured testing 528 [**15]
- stub 510 [**15]
- subclass 212 [**7]
- subsystem 486 [**14]
- superprogrammer 113 [**4]
- superstate 583 [**17]
- swimlane 585 [**17]
- synchronize 62 [**2]
- synchronize-and-stabilize life-cycle model 62 [**2]
- syntax-directed editor 139 [**5]
- system 24 [**1]
- systematic reuse 226 [**8]
- systematic testing 175 [**6]
- systems analysis 24 [**1]
- systems design 24 [**1]
- systems engineering 135 [**5]
- target computer 250 [**8]
- task 118 [**4]
- task 283 [**9]
- task 311 [**10]
- task 59 [**2]
- team 107 [**4]
- team 307 [**10]
- team leader 114 [**4]
- team manager 114 [**4]
- technical complexity factor (TCF) 274 [**9]
- technique 25 [**1]
- technique-based environment 538 [**15]
- temporal cohesion 189 [**7]
- temporal definition (of maintenance) 9 [**1]
- test case selection 527 [**15]
- test planning 288 [**9]
- test workflow 155 [**6]
- test workflow 303, 307 [**10]
- test workflow 417 [**13]
- test workflow 44 [**2]
- test workflow 84 [**3]
- test-driven development 59 [**2]
- testing 155 [**6]
- testing fault rate 530 [**15]
- testing phase 17 [**1]
- testing to code 517 [**15]
- testing to specifi cations 517 [**15]
- third-generation language 501 [**15]
- thousand delivered source instructions (KDSI) 272 [**9]
- three-tier architecture 237 [**8]
- timeboxing 60 [**2]
- token 384 [**12]
- tool 135 [**5]
- tool 308 [**10]
- tool 538 [**15]
- tool integration 538 [**15]
- toolkit 233 [**8]
- top-down integration 511 [**15]
- traceability 84 [**3]
- trade-off 486 [**14]
- traditional paradigm 25 [**1]
- training 290 [**9]
- transaction 473 [**14]
- transaction analysis 475 [**14]
- transaction-driven inspections 487 [**14]
- transition 383 [**12]
- transition 431 [**13]
- transition 581 [**17]
- transition function 377 [**12]
- transition phase 92 [**3]
- transition rule 377 [**12]
- unadjusted function points (UFP) 273 [**9]
- Unified Process 76 [**3]
- Unified Modeling Language (UML) 306 [**10]
- Unified Modeling Language (UML) 76 [**3]
- Unified Process 306 [**10]
- unit testing 516 [**15]
- unit testing 7 [**1]
- unit testing 85 [**3]
- unstructured interview 316 [**11]
- upperCASE tool 135 [**5]
- use case 318 [**11]
- use case 407 [**13]
- use case 577 [**17]
- use-case description 323 [**11]
- use-case diagram 325 [**11]
- use-case diagram 577 [**17]
- use-case realization 435 [**13]
- user 23 [**1]
- user interface integration 538 [**15]
- user-friendliness 350 [**11]
- utility 164 [**6]
- V & V 155 [**6]
- valid 520 [**15]
- validation 155 [**6]
- validation 17 [**1]
- variation 142 [**5]
- verifi cation 17 [**1]
- verification 155 [**6]
- version 141 [**5]
- version control tool 309 [**10]
- versions 309 [**10]
- vertical schema definition 389 [**12]
- videotape camera 317 [**11]
- Vienna definition method (VDM) 392 [**12]
- volume testing 536 [**15]
- walkthrough 309 [**10]
- waterfall life-cycle model 301 [**10]
- waterfall life-cycle model 41 [**2]
- waterfall model 7 [**1]
- weaver 592 [**18]
- white-box testing 517 [**15]
- widget 241 [**8]
- word processor 138 [**5]
- work 311 [**10]
- work package 284 [**9]
- work package 311 [**10]
- work product 283 [**9]
- work product 311 [**10]
- workbench 137 [**5]
- workbench 309 [**10]
- workbench 538 [**15]
- worker 457 [**13]
- workflow 303 [**10]
- workflow 44 [**2]
- wrapper 235 [**8]
- Y2K problem 405 [**13]
- Z 387 [**12]
