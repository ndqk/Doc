Những thách thức khi xây dựng một sản phẩm phần mềm không có giải pháp dễ dàng. Để kết hợp một sản phẩm phần mềm lớn cần có thời gian và nguồn lực. Và, giống như bất kỳ dự án xây dựng lớn nào khác, lập kế hoạch cẩn thận khi bắt đầu dự án có lẽ là yếu tố quan trọng nhất giúp phân biệt thành công và thất bại. Tuy nhiên, kế hoạch ban đầu này không có nghĩa là đủ. Lập kế hoạch, giống như kiểm thử, phải tiếp tục trong suốt quá trình phát triển và bảo trì phần mềm. Bất chấp nhu cầu lập kế hoạch liên tục, các hoạt động này đạt đến đỉnh điểm sau khi các thông số kỹ thuật đã được phác thảo nhưng trước khi các hoạt động thiết kế bắt đầu. Tại thời điểm này trong quá trình này, các ước tính chi phí và thời lượng có ý nghĩa được tính toán và lập kế hoạch chi tiết để hoàn thành dự án.
Trong chương này, chúng tôi phân biệt hai loại quy hoạch này, quy hoạch tiến hành xuyên suốt dự án và quy hoạch cường độ cao phải được thực hiện sau khi các thông số kỹ thuật hoàn chỉnh.

9.1 Planning and the Software Process
Tốt nhất, chúng tôi muốn lập kế hoạch cho toàn bộ dự án phần mềm ngay từ đầu của quá trình, và sau đó thực hiện theo kế hoạch đó cho đến khi phần mềm mục tiêu cuối cùng đã được giao cho khách hàng. Tuy nhiên, điều này là không thể, vì chúng tôi thiếu đủ thông tin trong quy trình làm việc ban đầu để có thể vạch ra một kế hoạch có ý nghĩa cho dự án hoàn chỉnh. Ví dụ, trong quy trình làm việc yêu cầu, bất kỳ loại lập kế hoạch nào (không chỉ dành cho bản thân quy trình yêu cầu) đều vô ích.
Có một thế giới khác biệt giữa thông tin mà nhà phát triển sử dụng ở cuối quy trình yêu cầu và ở cuối quy trình phân tích, tương tự như sự khác biệt giữa bản phác thảo thô và bản thiết kế chi tiết. Khi kết thúc quy trình làm việc yêu cầu, các nhà phát triển tốt nhất phải có hiểu biết không chính thức về những gì khách hàng cần. Ngược lại, vào cuối quy trình phân tích, tại thời điểm khách hàng ký một tài liệu nêu chính xác những gì sẽ được xây dựng, các nhà phát triển sẽ đánh giá chi tiết hầu hết (nhưng thường không phải là tất cả) các khía cạnh của sản phẩm mục tiêu. Đây là điểm sớm nhất trong quá trình có thể xác định chính xác khoảng thời gian và ước tính chi phí.

Tuy nhiên, trong một số tình huống, một tổ chức có thể được yêu cầu đưa ra các ước tính về thời lượng và chi phí trước khi các thông số kỹ thuật có thể được lập. Trong trường hợp xấu nhất, khách hàng có thể nhất quyết trả giá trên cơ sở một hoặc hai giờ thảo luận sơ bộ. Hình 9.1 cho thấy điều này có thể có vấn đề như thế nào. Dựa trên một mô hình trong [Boehm và cộng sự, 2000], nó mô tả phạm vi ước tính chi phí tương đối cho các quy trình công việc khác nhau của vòng đời. Ví dụ: giả sử rằng, khi một sản phẩm vượt qua kiểm tra chấp nhận ở cuối quy trình triển khai và được giao cho khách hàng, chi phí của nó được tìm thấy là 1 triệu đô la. Nếu một ước tính chi phí đã được thực hiện giữa chừng với quy trình làm việc theo yêu cầu, thì rất có thể nó sẽ nằm ở đâu đó trong phạm vi (0,25 triệu đô la, 4 triệu đô la), như thể hiện trong Hình 9.2. Tương tự, nếu ước tính chi phí được thực hiện giữa chừng trong quá trình phân tích, phạm vi ước tính có thể sẽ giảm xuống (0,5 triệu đô la, 2 triệu đô la). Hơn nữa, nếu ước tính chi phí đã được thực hiện vào cuối quy trình phân tích, tức là, vào thời điểm thích hợp, kết quả có thể sẽ nằm trong phạm vi tương đối rộng là (0,67 triệu đô la, 1,5 triệu đô la). Tất cả bốn điểm được đánh dấu trên các đường giới hạn trên và dưới trong Hình 9.2, có thang đo logarit trên trục tung. Mô hình này được gọi là hình nón của sự không chắc chắn. Rõ ràng từ Hình 9.1 và 9.2 rằng ước tính chi phí không phải là một khoa học chính xác; lý do cho điều này được nêu trong Phần 9.2.
Dữ liệu dựa trên mô hình hình nón của sự không chắc chắn đã cũ, bao gồm năm đề xuất được đệ trình cho Bộ phận Hệ thống Điện tử của Lực lượng Không quân Hoa Kỳ [Devenny, 1976] và các kỹ thuật ước tính đã được cải thiện kể từ thời điểm đó. Tuy nhiên, hình dạng tổng thể của đường cong trong Hình 9.1 có thể không thay đổi quá nhiều. Do đó, thời hạn hoặc ước tính chi phí quá sớm, tức là ước tính được thực hiện trước khi khách hàng ký duyệt các thông số kỹ thuật, có thể kém chính xác hơn đáng kể so với ước tính được thực hiện khi đã tích lũy đủ dữ liệu.
Bây giờ chúng ta kiểm tra các kỹ thuật để ước tính thời lượng và chi phí. Giả định trong suốt phần còn lại của chương này là quy trình phân tích đã được hoàn thành; nghĩa là bây giờ có thể thực hiện ước tính và lập kế hoạch có ý nghĩa.

9.2 Estimating Duration and Cost 
Ngân sách là một phần không thể thiếu trong bất kỳ kế hoạch quản lý dự án phần mềm nào. Trước khi bắt đầu thiết kế, khách hàng cần biết họ sẽ phải trả bao nhiêu cho sản phẩm. Nếu nhóm phát triển đánh giá thấp chi phí thực tế, tổ chức phát triển có thể mất tiền cho dự án. Mặt khác, nếu nhóm phát triển đánh giá quá cao, thì khách hàng có thể quyết định rằng, trên cơ sở phân tích chi phí - lợi ích hoặc lợi tức đầu tư, không có ích lợi gì khi xây dựng sản phẩm. Ngoài ra, khách hàng có thể giao công việc cho một tổ chức phát triển khác có ước tính hợp lý hơn. Dù bằng cách nào, rõ ràng là việc ước tính chi phí chính xác là rất quan trọng.
Trên thực tế, có hai loại chi phí liên quan đến việc phát triển phần mềm. Đầu tiên là chi phí nội bộ, chi phí cho các nhà phát triển; thứ hai là chi phí bên ngoài, mức giá mà khách hàng sẽ phải trả. Chi phí nội bộ bao gồm tiền lương của các nhóm phát triển, quản lý và nhân viên hỗ trợ tham gia vào dự án; chi phí của phần cứng và phần mềm để phát triển sản phẩm; và chi phí chung như tiền thuê nhà, tiền điện nước và tiền lương của quản lý cấp cao. Mặc dù giá cả thường dựa trên chi phí cộng với tỷ suất lợi nhuận, nhưng trong một số trường hợp, các yếu tố kinh tế và tâm lý là quan trọng. Ví dụ: các nhà phát triển rất cần công việc có thể chuẩn bị tính phí khách hàng. Một tình huống khác nảy sinh khi hợp đồng được trao trên cơ sở hồ sơ dự thầu. Khách hàng có thể từ chối một giá thầu có thể thấp hơn đáng kể so với tất cả các giá thầu khác với lý do rằng chất lượng của sản phẩm kết quả có thể cũng sẽ thấp hơn đáng kể. Do đó, nhóm phát triển có thể cố gắng đưa ra giá thầu thấp hơn một chút nhưng không đáng kể so với giá thầu của đối thủ cạnh tranh.
Một phần quan trọng khác của bất kỳ kế hoạch nào là ước tính thời gian của dự án. Khách hàng chắc chắn muốn biết khi nào thành phẩm sẽ được giao. Nếu tổ chức phát triển không thể giữ đúng tiến độ của mình, thì tốt nhất là tổ chức mất uy tín, các điều khoản hình phạt tồi tệ nhất sẽ được viện dẫn. Trong mọi trường hợp, các nhà quản lý chịu trách nhiệm về kế hoạch quản lý dự án phần mềm có rất nhiều việc phải giải thích. Ngược lại, nếu tổ chức phát triển đánh giá quá cao thời gian cần thiết để xây dựng sản phẩm, thì rất có thể khách hàng sẽ đi nơi khác.
Thật không may, không có nghĩa là dễ dàng để có được một ước tính chi phí và ước tính thời gian chính xác. Có quá nhiều biến liên quan để có thể xử lý chính xác chi phí hoặc thời lượng. Một khó khăn lớn là yếu tố con người. Hơn 40 năm trước, Sackman và các đồng nghiệp đã quan sát thấy sự khác biệt lên tới 28 đến 1 giữa các cặp lập trình viên [Sackman, Erikson và Grant, 1968]. Thật dễ dàng để phủ nhận kết quả của họ bằng cách nói rằng các lập trình viên có kinh nghiệm luôn làm tốt hơn những người mới bắt đầu, nhưng Sackman và các đồng nghiệp của ông đã so sánh các cặp lập trình viên phù hợp. Ví dụ, họ đã quan sát hai lập trình viên với 10 năm kinh nghiệm về các loại dự án tương tự và đo thời gian họ thực hiện các tác vụ như viết mã và gỡ lỗi. Sau đó, họ quan sát, chẳng hạn, hai người mới bắt đầu vào nghề trong cùng một khoảng thời gian ngắn và có nền tảng giáo dục tương tự nhau. So sánh hiệu suất kém nhất và tốt nhất, họ đã quan sát thấy sự khác biệt từ 6 đến 1 về kích thước sản phẩm, 8 đến 1 về thời gian thực thi sản phẩm, 9 đến 1 về thời gian phát triển, 18-1 về thời gian mã hóa và 28-1 về thời gian gỡ lỗi. Một quan sát đặc biệt đáng báo động là màn trình diễn tốt nhất và kém nhất trên một sản phẩm là của hai lập trình viên, mỗi người đã có 11 năm kinh nghiệm. Ngay cả khi các trường hợp tốt nhất và xấu nhất được loại bỏ khỏi mẫu của Sackman và cộng sự, sự khác biệt quan sát được vẫn theo thứ tự từ 5 đến 1. Trên cơ sở các kết quả này, rõ ràng, chúng tôi không thể hy vọng ước tính chi phí hoặc thời lượng phần mềm với bất kỳ mức độ chính xác (trừ khi chúng tôi có thông tin chi tiết về tất cả các kỹ năng của tất cả các nhân viên, điều này sẽ là bất thường nhất). Người ta đã lập luận rằng, trong một dự án lớn, sự khác biệt giữa các cá nhân có xu hướng bị loại bỏ, nhưng điều này có lẽ là mơ tưởng; sự hiện diện của một hoặc hai thành viên nhóm rất giỏi (hoặc rất kém) có thể gây ra sự sai lệch rõ rệt so với lịch trình và ảnh hưởng đáng kể đến ngân sách.
Một yếu tố con người khác có thể ảnh hưởng đến việc ước tính là ở một quốc gia tự do, không có cách nào đảm bảo rằng một nhân viên quan trọng sẽ không từ chức trong quá trình dự án. Sau đó, thời gian và tiền bạc được dành để cố gắng lấp đầy vị trí trống và tích hợp người thay thế vào đội, hoặc sắp xếp lại các thành viên còn lại trong đội để bù đắp cho sự mất mát. Dù bằng cách nào, lịch trình trượt và ước tính không ổn định.
Cơ bản của vấn đề ước tính chi phí là một vấn đề khác: Kích thước của một sản phẩm được đo lường như thế nào?

9.2.1 Metrics for the Size of a Product 
Số liệu phổ biến nhất cho kích thước của sản phẩm là số dòng mã. Hai đơn vị thường được sử dụng: dòng mã (LOC) và hàng nghìn hướng dẫn nguồn được phân phối (KDSI). Nhiều vấn đề liên quan đến việc sử dụng các dòng mã [van der Poel và Schach, 1983].
• Tạo mã nguồn chỉ là một phần nhỏ trong tổng số nỗ lực phát triển phần mềm. Có vẻ hơi xa vời khi thời gian cần thiết cho các quy trình công việc yêu cầu, phân tích, thiết kế, thực hiện và thử nghiệm (bao gồm các hoạt động lập kế hoạch và tài liệu) có thể chỉ được biểu thị dưới dạng một hàm của số dòng mã trong sản phẩm cuối cùng.
• Việc triển khai cùng một sản phẩm bằng hai ngôn ngữ khác nhau dẫn đến các phiên bản có số dòng mã khác nhau. Ngoài ra, với các ngôn ngữ như Lisp hoặc với nhiều 4GL phi thủ tục (Phần 15.2), khái niệm về một dòng mã không được xác định.
• Thường không rõ chính xác cách đếm các dòng mã. Chỉ nên đếm các dòng mã thực thi hay định nghĩa dữ liệu? Và những bình luận có nên được tính không? Nếu không, có một nguy cơ là các lập trình viên sẽ miễn cưỡng dành thời gian cho những gì họ cho là các nhận xét “không hiệu quả”, nhưng nếu các nhận xét được tính, thì điều nguy hiểm ngược lại là các lập trình viên sẽ viết hàng loạt nhận xét để tăng năng suất rõ ràng. Ngoài ra, những gì về đếm các câu lệnh ngôn ngữ kiểm soát công việc? Một vấn đề khác là cách tính các dòng đã thay đổi hoặc các dòng đã xóa — trong quá trình cải tiến một sản phẩm để cải thiện hiệu suất của nó, đôi khi số lượng dòng mã bị giảm xuống. Việc sử dụng lại mã (Phần 8.1) cũng làm phức tạp việc đếm dòng: Nếu mã được sử dụng lại được sửa đổi, thì nó được tính như thế nào? Và, điều gì sẽ xảy ra nếu mã được kế thừa từ một lớp cha (Phần 7.8)? Nói tóm lại, số liệu rõ ràng đơn giản của các dòng mã là bất kỳ thứ gì ngoại trừ đơn giản để đếm.
• Không phải tất cả các mã được triển khai đều được chuyển đến máy khách. Không có gì lạ khi một nửa mã bao gồm các công cụ cần thiết để hỗ trợ nỗ lực phát triển.
• Giả sử rằng một nhà phát triển phần mềm sử dụng trình tạo mã, chẳng hạn như trình tạo báo cáo, trình tạo màn hình hoặc trình tạo giao diện người dùng đồ họa (GUI). Sau một vài phút hoạt động thiết kế của nhà phát triển, công cụ có thể tạo ra hàng nghìn dòng mã.
• Số lượng dòng mã trong sản phẩm cuối cùng chỉ có thể được xác định khi sản phẩm được hoàn thiện hoàn toàn. Do đó, việc ước tính chi phí dựa trên các dòng mã sẽ nguy hiểm gấp đôi. Để bắt đầu quá trình ước tính, số lượng dòng mã trong thành phẩm phải được ước tính. Sau đó, ước tính này được sử dụng để ước tính giá thành của sản phẩm. Không chỉ có sự không chắc chắn trong mọi kỹ thuật tính chi phí, mà nếu đầu vào của bản thân công cụ ước tính chi phí không chắc chắn là không chắc chắn (tức là số dòng mã trong một sản phẩm chưa được tạo), thì độ tin cậy của chi phí kết quả ước tính không chắc là rất cao.


























 
 

