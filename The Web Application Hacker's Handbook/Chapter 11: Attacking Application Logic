ATTACKING APPLICATION LOGIC

**********************************************************
I. The Nature of Logic Flaws

**********************************************************
II. Read-World Logic Flaws
	1. Example 1: Asking the Oracle
		The authors have found instances of the "encryption oracle" flaw within many different types of applications. They have used it in numerous attacks, from decrypting domain credentials in printing software to breaking cloud computing. The following is a classic example of the flaw found in a software sales site.
		
		1.1. The Functionality
			The application implemented a "remember me" function whereby a user could avoid logging in to the application on each visit by allowing the application to set a permanent cookie within the browser. This cookie was protected from tampering or disclosure by an encryption algorithm that was run over a string composed of the name, user ID, and volatile data to ensure that it could not be replayed by an attacker who gained access to it, data specific to the machine was also collected, including the IP address.
			This cookie was justifiably considered a robust solution for protecting a potentially vulnerable piece of required business functionality.
			As well as a "remember me" function, the application had functionality to store the user's screen name within a cookie named ScreenName. That way, the user could receive a personalized greeting in the corner of the site whenever she next visited the site. Deciding that this name was also a piece of security information, it was deemed that this should also be encrypted.
		
		1.2. The Assumption
			The developers decided that because the ScreenName cookie was of considerably less value to an attacker than the RememberMe cookie, they may as well use the same encryption algorithm to protect it. What they did not consider was that a user can specify this screen name and view it onscreen. This inadvertently gave users access to encryption function (and encryption key) used to protect the persistent authentication token RememberMe.
			
		1.3. The Attack
			In a simple attack, a user supplied the encrypted value of his or her RememberMe cookie in place of the encrypted ScreenName cookie. When displaying the screen name back to the user, the application would decrypt the value, check that decryption had worked, and then print the result on-screen. This resulted in the following message:
					Welcome, marcus|734|192.168.4.282750184
			Although this was interesting, it was not necessarily a high-risk issue. It simply meant that given an encrypted RememberMe cookie, an attacker could list the contents, including a username, user ID, and IP address. Because no password was stored in the cookie, there was no immediate way to act on the information obtained.
			The real issue arose from the fact that users could specify their screen names. As a result, a user could choose this screen name, for example:
					admin|1|192.168.4.282750184
			When the user logged out and logged back in, the application encrypted this value and store it in the user's browser as the encrypted ScreenName cookie. If an attacker submitted this encrypted token as the value of the RememberMe cookie, the application decrypted it, read the user ID, and logged in the attacker as the administrator! Even though the encryption was Triple DES, using a strong key and protected against replay attacks, the application could be harnessed as an "encryption oracle" do decrypt and encrypt arbitrary values.
		
		HACK STEPS:
			Manifestations of this type of vulnerability can be found in diverse locations. Examples include account recovery tokens, token-based access to authenticated resources, and any other value being sent to the client side that needs to be either tamper-proof or unreadable to the user.
				1. Look for locations where encryption (not hashing) is used in the application. Determine any locations where the application encrypts or decrypts values supplied by a user, and attempt to substitute any other encrypted values encountered within the application. Try to cause an error within the application that reveals the decrypted value or where the decrypted value is purposely displayed on-screen.
				2. Look for an "oracle reveal" vulnerability by determining where an encrypted value can be supplied that results in the corresponding decrypted value's being displayed in the application's response. Determine whether this leads to the disclosure of sensitive information, such as a password or credit card.
				3. Look for an "oracle encrypt" vulnerability by determining where supplying a cleartext value causes the application to return a corresponding encrypted value. Determine where this can be abused by specifying arbitrary values, or malicious payloads that the application will process.
					
	2. Example 2: Fooling a Password Change Function
		The authors have encountered this logic flaw in a web application implemented by a financial services company and also in the AOL AIM Enterprise Gateway application.
		
		2.1. The Functionality
			The application implemented a password change function for end users. It required the user to fill out fields for username, existing password, new password, and confirm new password.
			The was also a password change function for use by administrators. This allowed them to change the password for any user without supplying the existing password. The two functions were implemented within the same server-side script.
		
		2.2. The Assumption
			The client-side interface presented to users and administrators differed in on respect: the administrator's interface did not contain a field for the existing password. When the server-side application processed a password change request, it used the presence or absence of the existing password parameter to indicate whether the request was from an administrator or an ordinary user. In other words, it assumed that ordinary users would always supply an existing password parameter.
			This code responsible looked something like this:
					String existingPassword = request.getParameter(“existingPassword”);
					if (null == existingPassword)
					{
						trace(“Old password not supplied, must be an administrator”);
						return true;
					}
					else
					{
						trace(“Verifying user’s old password”);
						...
		
		2.3. The Attack
			When the assumption is explicitly stated in this way, the logic flaw becomes obvious. Of course, an ordinary user could issue a request that dit not contain an existing password parameter, because users controlled every aspect of the requests they issued.
			The logic flaw was devastating for the application. It enabled an attacker to reset the password of any other user and take full control of that person's account.
			
			HACK STEPS:
				1. When probing key functionality for logic flaws, try removing in turn each parameter submitted in requests, including cookies, query string fields, and items of POST data.
				2. Be sure to delete the actual name of the parameter as well as its value. Do not just submit an empty string, because typically the server handles this differently.
				3. Attack only one parameter at a time to ensure that all relevant code paths within the application are reached.
				4. If the request you are manipulating is part of a multistage process, follow the process through to completion, because some later logic may process data that was supplied in earlier steps and stored within the session.
	
	3. Example 3: Proceeding to Checkout
		The authors encountered this logic flaw in the web application employed by an online retailer
		
		HACK STEPS:
			The technique for finding and exploiting flaws of this kind is known as forced browsing. It involves circumventing any controls imposed by in-browser navigation on the sequence in which application functions may be accessed:
				1. When a multistage process involves a defined sequence of requests, attempt to submit these requests out of the expected sequence. Try skipping certain stages, accessing a single stage more than once, and accessing earlier stages after later ones.
				2. The sequence of stages may be accessed via a series of GET or POST requests for distinct URLs. The stage being requested may be specified by submitting a function name or index within a request parameter. Be sure to understand fully the mechanisms that the application is employing to deliver access to distinct stages.
				3. From the context of the functionality that is implemented, try to understand what assumptions the developers may have made and where the key attack surface lies. Try to identify ways of violating those assumptions to cause undesirable behavior within the application.
				4. When multistage functions are accessed out of sequence, it is common to encounter a variety of anomalous conditions within the application, such as variables with null or uninitialized values, a partially defined or inconsistent state, and other unpredictable behavior. In this situation, the application may return an interesting error message and debug output, which you can use to better understand its internal workings and thereby fine-tune the current or a different attack. Sometime, the application may get into a stage entirely unanticipated by the developers, which may lead to serious security flaws.
				
	4. Example 4: Rolling Your Own Insurance
		The authors encountered this logic in a web application deployed by a financial services company.
		
		HACK STEPS:
			The flaws ion this application were fundamental to its security, but none of them would have been identified by an attacker who simply intercepted browser requests and modified the parameter values being submitted.
				1. Whenever an application implements a key action across multiple stages, you should take parameters that are submitted at one stage of the process and try to submitting these to a different stage. If the relevant items of data are updated within the application's stage, you should explore the ramifications of this behavior to determine whether you can leverage it to carry out any malicious action, as in the preceding three examples.
				2. If the application implements functionality whereby different categories of user can update or perform other actions on a common collection of data, you should walk through the process using each type of user and observe the parameters submitted. Where different parameters are ordinarily submitted by the different users, take each parameter submitted by one user and try to submit it as the other user. If the parameter is accepted and processed as that user, explore the implications of this behavior as previously described.
	
	5. Example 5: Breaking the Bank
		The authors encountered this logic flaw in the web application deployed by a major financial services company.
		
		HACK STEPS:
			1. In a complex application involving either horizontal or vertical privilege segregation, try to locate any instances where an individual user can accumulate an amount of state within his session that relates in some way to his identity.
			2. Try to step through one area of functionality, and then switch to an unrelated area, to determine whether any accumulated state information has an effect on the application's behavior.
			
	6. Example 6: Beating a Business Limit
		The authors encountered this logic flaw in a web-based enterprise resource planning application used within a manufacturing company.
		
		HACK STEPS:
			The first step in attempting to beat a business limit is to understand what characters are accepted within the relevant input that you control.
				1. Try entering negative values, and see if the application accepts them and processes them in the way you would expect
				2. You may need to perform several steps to engineer a change in the application's stage that can be exploited for a useful purpose. For example, several transfers between accounts may be required until a suitable balance has been accrued that can actually be extracted.
				
	7. Example 7: Cheating on Bulk Discounts
		The authors encountered this logic flaw in the retail application of a software vendor.
		
		HACK STEPS:
			1. In any situation where prices or other sensitive values are adjusted based on criteria that are determined by user-controllable data or actions, first understand the algorithms that the application uses and the point within its logic where adjustments are made. Identify whether these adjustments are made on a one-time basic or whether they are revised in response to further actions performed by the user.
			2. Think imaginatively. Try to find a way of manipulating the application's behavior to cause it to get into a state where the adjustments it has applied do not correspond to the original criteria intended by its designers. In the most obvious case, as just described, this may simply involve removing items from a shopping cart after a discount has been applied.
	
	8. Example 8: Escaping from Escaping
		The authors encountered this logic flaw in various web applications, including the web administration interface used by a network intrusion detection product.
		
		HACK STEPS:
			Whenever you probe an application for command injection and other flaws, having attempted to insert the relevant metacharacters into the data you control, always try placing a backslash immediately before each such character to test for the logic flaws just described.
			
	9. Example 9: Invalidating Input Validation
		The authors encountered this logic flaw in a web application used in an e-commerce site. Variants can be found in many other application.
		
		HACK STEPS:
			Make a note of any instances in which the application modifies user input, in particular by truncating it, stripping out data, encoding, or decoding. For any observed instances, determine whether a malicious string can be contrived:
				1. If data is stripped once (non-recursively), determine whether you can submit a string that compensates for this. For example, if the application filters SQL keywords such as SELECT, submit SELSELECTECT and see if the resulting filtering removes the inner SELECT substring, leaving the word SELECT.
				2. If data validation takes place in a set order and one or more validation processes modifies the data, determine whether this can be used to beat one of the prior validation steps. For example, if the application performs URL decoding and then strips malicious data such as the <script> tag, it may be possible to overcome this with strings such as:
						%<script>3cscript%<script>3ealert(1)%<script>3c/script%<script>3e
	
	10. Example 10: Abusing a Search Function
		The authors encountered this logic flaw in an application providing subscription-based access to financial news and information. The same vulnerability was later found in two completely unrelated applications, illustrating the subtle and pervasive nature of many logic flaws.
	
	11. Example 11: Snarfing Debug Messages
		The authors encountered this logic flaw in a web application used by a financial services company.
		
		HACK STEPS:
			1. To detect a flaw of this kind, first catalog all the anomalous events and conditions that can be generated and that involve interesting user-specific information being returned to be browser in an unusual way, such as a debugging error message.
			2. Using the application as two users in parallel, systematically engineer each condition using one or both users, and determine whether the other user if affected in each case.
			
	12. Example 12: Racing Against the Login
		This logic flaw has affected several major applications in the recent past.
		
		HACK STEPS:
			Performing remote black-box testing for subtle thread safety issues of this kind is not straightforward. It should be regarded as a specialized undertaking, probably necessary only the most security-critical of applications.
				1. Target selected items of key functionality, such as login mechanisms, password change functions, and funds transfer processes.
				2. For each function tested, identify a single request, or a small number of requests, that a given user can use to perform a single action. Also find the simplest means of confirming the result of the action, such as verifying that a given user's login has resulted in access to that person's account information.
				3. Using several high-spec machines, accessing the application from different network locations, script an attack to perform the same action repeatedly on behalf of several different users. Confirm whether each action has the expected results.
				4. Be prepared for a large volume of false positives. Depending on the scale of the application's supporting infrastructure, this activity may well amount to a load test of the installation. Anomalies may be experienced for reasons that have nothing to do with security.
				
***************************************************************************
III. Avoiding Logic Flaws


***************************************************************************
SUMMARY
	Attacking an application's logic involves a mixture of systematic probing and lateral thinking. Web have described various key checks that you should always carry out to test the application's behavior in response to unexpected input. These include removing parameters from requests, using forced browsing to access functions out of sequence, and submitting parameters to different locations within the application. Often, how an application responds to these actions points toward some defective assumption that you can violate, to malicious effect.
	In addition to these basic tests, the most important challenge when probing for logic flaws is to try to get inside the developers' minds. You need to understand what they were trying to achieve, what assumptions they probably made, what shortcuts they probably took, and what mistakes they may have made. Imagine that you were working on a tight deadline, worrying primarily about functionality rather than security, trying to add a new function to an existing code base, or using poorly documented APIs written by someone else. In that situation, what would you get wrong, and how could it be exploited?
	
	
***************************************************************************
QUESTIONS
	
1. What is forced browsing, and what kinds of vulnerabilities can it be used to identify?
 - Answer: Forced browsing involves circumventing any constraints imposes by in-browser navigation on the sequence with which application functions may be accessed. You should use forced browsing to test for faulty assumptions in multistage processes and other areas. These assumptions often lead to access control weaknesses which you can exploit using forced browsing.
 

2. An application applies various global filters on user input, designed to prevent different categories of attack. To defend against SQL injection, it doubles up any single quotation marks that appear in user input. To prevent buffer overflow attacks against some native code components, it truncates any overlong items to a reasonable limit. What might go wrong with these filters?
 - Answer: 
 			If quotation marks are doubled up before the length limit is enforced, the you can introduce an odd number of single quotes into you input by causing the input to be truncated in between two doubled up quotes.
 			If the length limit is applied before the doubling up, then you may still able to exploit any buffer overflow conditions by placing a large number of single quotes at the start of your payload, causing this to extend sufficiently far to overflow the buffer with crafted data positioned towards the end of your payload.
 			

3. What steps could you take to probe a login function for fail-open conditions? (Describe as many different tests as you can think of.)
	- Answer: Using valid credentials for an account you control, you should repeat the login process numerous times, modifying your requests in specific ways:
			For each parameter submitted, try submitting any empty value, omitting the name/value pair altogether, and submitting the same item multiple times with different values.
			If the process involves multiple stages, try performing these stages in a different sequence, skipping individual stages altogether, proceeding directly to arbitrary stages, and submitting parameters at stages where they are not expected.
			If the same item of data is submitted more than once, probe to determine how each value is processed, and whether data that is validated at one stage is trusted later on.
			

4. A banking application implements a multistage login mechanism that is intended to be highly robust. At the first stage, the user enters a username and password. At the second stage, the user enters the changing value on a physical token she possesses, and the original username is resubmitted in a hidden form field. What logic flaw should you immediately check for?
	- Answer: The application may well be performing these two checks independently, validating the passing against one username and the token's value against a different username, and then creating an authenticated session in the context of one of the validated usernames.
				If an application user who possesses their town physical token manages to obtain the password of another user, they may be able to login as that user. Conversely, depending on how the logic functions, a user who can read the value from another user's token may be able to login as that user without knowing their password. The overall security posture of the solution is thus significantly diminished.

5. You are probing an application for common categories of vulnerability by submitting crafted input. Frequently, the application returns verbose error messages containing debugging information. Occasionally, these messages relate to errors generated by other users. When this happens, you are unable to reproduce the behavior a second time. What logic flaw might this indicate, and how should you proceed?
	- Answer: This behavior indicates that the error message functionality is not thread safe, and is returning the details of the last error generated by any user. You should probe further using two different sessions simultaneously to confirm whether this is the case. If so, you should use a script to constantly trigger an informative message and log any deviations in its contents for interesting information relating to other application users.
	
	


		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
				
	
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
							
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
