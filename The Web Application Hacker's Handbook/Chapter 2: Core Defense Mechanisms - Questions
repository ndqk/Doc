1. Why are an application's mechanisms for handling user access only as strong as the weakest of these components ?
 - Because: Most web application handle access using a trio of interrelated security mechanisms: 
	- Authentication
	- Session management
	- Access control
	Each of these mechanisms represents a significant area of an application's attack surface, and each is fundamental to an application's overall security posture.Because of their interdependencies, the overall security provided by the mechanisms is only as strong as the weakest link in the chain. A defect in any single component may enable an attacker to gian unrestricted access to the application's functionality and data.

2. What is the difference between a session and a session token?
 - Session: is a set of data structures held on the server that track the state of the user's interaction with the application.
 - Session token: is a unique string that the application maps to the session. When a user receives a token, the browser automatically submits it back to the server in each subsequent HTTP request, enabling the application to associate the request with that user.

3. Why is it not always possible to use a whitelist-based approach to input validation?
 - Because: In numerous situations an application must accept data for processing that does not meet any reasonable criteria for what is known to be "good". For example, some people's names contain an apostrophe or hyphen. These can be used in attacks againt databases, but it may be a requirement that application should permit anyone to register under his or her real name. Hence, althouht it is often extremely effective, the whitelist-based approach does not represent an all-purpose solution to the problem of handling user input.

4. You are attacking an application that implements an administrative function. You do not have any valid credentials to use the function. Why should you nevertheless pay close attention to it?
 - Defects in the any of the core mechanisms for handling access may enable you to gain unauthorized access to the administrative functionality. Further, data that you submit as a low privileged user may ultimately be displayed to administrative users, enabling you to attack them by submitting malicious data designed to compromise their session when it is viewed.

5. An input validation mechanism designed to block cross-site scripting attacks performs the following sequence of steps on a item of input:
	1. Strip any <script> expressions that appear.
	2. Truncate the input to 50 characters.
	3. Remove any quotation marks within the input.
	4. URL-decode the input
	5. If any items were deleted, return to step 1

Can you bypass this validation mechanism to smuggle the following data past it?
	"><script>alert("foo")</script>
 - Yes. If it were not for Step 4, this mechanism would be robust in terms of filtering the specific items it is designed to block. However, because your input is decoded after the filtering steps have been performed, you can simply URL-encode selected characters in your payload to evade the filter:
 	%22>%3cscript>alert(%22foo%22)</script>
 If Step 4 were performed first (or even not at all) then this bypass would not be possible



