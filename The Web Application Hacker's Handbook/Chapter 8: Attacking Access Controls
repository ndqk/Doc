Attacking Access Controls

-----------------------------------------------------------------------------------------
I. Common Vulnerabilities
Access controls can be divided into three broad categories: 
 - vertial 
 - horizontal
 - context-dependent

 1. Completely Unprotected Functionality
  1.1. Direct Access to Methods
 
 2. Identifier-Based Functions
 
 3. Multistage Functions
 
 4. Static Files
 
 5. Platform Misconfiguration
 
 6. Insecure Access Control Methods
  6.1. Parameter-Based Access Control
  6.2. Referer-Based Access Control
  6.3. Location-Based Access Control

-------------------------------------------------------------------------------------------
II. Attacking Access Controls
 HACK STEPS:
  Here are some questions to consider when examining an application's access controls:
  1. Do application functions give individual users access to particular subset of data that belongs to them?
  2. Are there different levels of user, such as managers, superviors, guests, and so on, who are granted access to different functions?
  3. Do administrators use functionality that is built into the same application to configure and monitor it?
  4. What functions or data resources within the application have you identified that would most likely enable you to escalate your current privileges?
  5. Are there any identifiers (by way of URL parameters of POST body message) that signal a parameter is being used to track access levels?
 
 1. Testing with Different User Accounts
  The easiest and most effective way to test the effectiveness of an application's access controls is to access the application using different accounts. That way you can determine whether resources and functionality that can be accessed legitimately by one account can be accessed illegitimatelt by another.
  HACK STEPS:
   1. If the application segregates user access to different levels of functionality, first use a powerful account to locate all the available functionality. Then attempt to access this using a lower-privileged account to  test for vertical privilege escalation.
   2. If the application segregates user access to different resources (such as documents), use two different user-level accounts to test whether access controls are effective or whether horizontal privilege escalation is possible. For example, find a document that can be legitimately accessed by one user but not by another, and attempt to access it using the second user's account - either by requesting the relevant URL or by submitting the same POST parameters from within the second user's session.  
   
  Burp Suite lets you map the contents of an application using two different user contexts. Then you can compare the results to see exactly where the content accessed by each user is the same or different.
  HACK STEPS: 
   1. With Burp configured as your proxy and interception disabled, browse all the application's content within one user context. If you are testing vertical access controls, use the higher-privilege account for this.
   2. Review the content of Burp's site map to ensure that you have identified all the functionality you want to test. Then use the context menu to select the "compare site maps" feature.
   3. To select the second site map to be compared, you can either load this from a Burp state file or have Burp dynamically rerequest the first site map in a new session context. To test horizontal access controls between users of the same type, you can simply load a state file you saved earlier, having mapped the application as a different user. For testing vertical access controls, it is preferable to rerequest the high-privilege site map as a low-privileged user, because this ensures complete coverage of the relevant functionality.
   4. To rerequest the first site map in a different session, you need to configue Burp's session-handling functionality with the details of the low-privilege user session (for example, be recording a login macro or providing a specific cookie to be used in requests). This feature is described in more detail in Chapter 14. You may also need to define suitable scope rules to prevent Burp from requesting any logout function.

 2. Testing Multistage Processes
  HACK STEPS:
   1. When an action is carried out in a multistep way, involving several different requests from clien to server, test each request individually to determince whether access controls have been applied to it. Be sure to include every request, including form submissions, the following of redirections, and may unparameterized requests.
   2. Try to find any locations where the application effectively assumes that if you have reached a particular point, you must have arrived via legitimate means. Try to reach that point in other ways using a lower-privileged account to detect if any privilege escalation attacks are possible.
   3. One way to perform this testing manually is to walk through a protected multistage process serveral times in your browser and use your proxy to switch the session token supplied in different requests to that of a less-privileged user.
   4. You can often dramatically speed up this process by using the "request in browser" feature of Burp Suite:
    a. Use the higher-privileged account to walk through the entire multistage process.
    b. Log in to the application using the lower-privileged account (or mor at all).
    c. In the Burp Proxy history, find the sequence of requests that ware make when the multistage process was performed as a more privileged user. For each request in the sequence, select the context menu item "request in browser in current browser session", as shown in Firgure 8-4. Paste the provided URL into your browser that is logged in as the lower-privileged user.
    d. If the application lets you, follow through the remainder of the multistage process in the normal way, using your browser.
    e. View the result within both the broswer and the proxy history to determine whether it successfully performed the privileged action.
 
 3. Testing with Limited Access
  HACK STEPS:
   1. Use the content discovery techniques described in Chapter 4 to identify as much of the application's functionality as possible. Performing this exercise as a low-privileged user is often sufficient to both enumnerate and gain direct access to sensitive functionality.
   2. Where application pages are identified that are likely to present different functionality or links to ordinary and administrative users (for example, Control Panel or My Home Page), try adding parameters such as admin=true to the URL query string and the body of POST requests. This will help you determine whether this uncovers or gives access to any additional functionality than your user context has normal access to.
   3. Test whether the application uses the Referer header as the basic for making access control decisiions. For key application functions that you are authorized to access, try removing or modifying the Referer header, and determine whether you request is still successful. If not, the application may be trusting the Referer header in an unsafe way. If you can requests using Burp's active scanner, Burp tries to remove the Referer header from each request and informs you if this appear to make systematic and relevant different to application;s response.
   4. Review all client-side HTML and scripts to find references to hidden functionality or functionality that can be manipulated on the client side, such as script-based user interfaces. Also, decompile all browser extension components as described in Chapter 5 to discover any references to server-side functionality.
 
  When all accessible functionality has been enumerated, you need to test whether per-user segregation of access to resources is being correctly enforced. In every instance where the application grants users access to a subset of a wider range of resources of the same type (such as documents, orders, e-mails, and personal details), there may be opportunities for one user to gain unauthorized access to other resources.
  HACK STEPS:
   1. Where the application uses identifiers of any kind (document IDs, account numbers, order references) to specify which resource a user is requesting, attempt to discover the identifiers for resources to which you do not have authorized access.
   2. If it is possible to generate a series of such identifiers in quick succession (for example, by creating multiple new documents or orders), use the techniques described in Chapter 7 for session tokens to try to discover any predictable sequences in the identifiers the application produces.
   3. If it is not possible to generate any new identifiers, you are restricted to analyzing the identifiers you have already discovered, or even using plain guesswork. If the identifier has the form of a GUID, it is unlikely that any attempts based on guessing will be successful. However, if it is a relatively small number, try other numbers in close range, or random numbers with the same number of digits.
   4. If access controls are found to be broken, and resource identifiers are found to be predictable, you can moount an automated attack to harvest sensitive resources and information from the application. Use the techniques described in Chapter 14 to design a bespoke automated attack to retrieve the data you require.
   A catastrophuc vulnerabilities of this kind occurs where an Account Information page displays a user's personal details together with his username and password. Although the password typically is masked on-screen, it is nevertheless transmitted in full to the browser. Here, you can often quickly iterate throught the full range of account identifiers to harvest the login credentials of all users, including administrators. Figure 8-5 shows Burp Intruder being used to carry out a successful attack of this kind
   
 4. Testing Direct Access to Methods
  HACK STEPS:
   1. Identify any parameters that follow Java naming conventions (for example, get, set, add, update, is, or has followed by a capitalized word), or explicitly specify a package structure (for example, com.companyname.xxx.yyy.ClassName). Make a note of all referenced methods you can find.
   2. Look out for a method that lists the available interfaces or methods. Check through your proxy history to see if it has been called as part of the application's normal communication. If not, try to guess it using the observed naming convention.
   3. Consult public resources such as search engines and forum sites to determine any other methods that might be accessible.
   4. Use the techniques described in Chapter 4 to guess other method names.
   5. Attempt to access all methods gathered using a variety of user account types, including unauthenticated access.
   6. If you do not know the number or types of arguments expected by some methods, look for methods that are less likely to take arguments, such as listInterfaces and getAllUsersInRoles.
   
 5. Testing Controls Over Static Resources
  HACK STEPS:
   1. Step through the normal process for gaining access to a protected static resource to obtain an example of the URL by which it is ultimatedly retrieved.
   2. Using a different user context (for example, a less-privileged user or an account that has not made a required purchase), attempt to access the resource directly using the URL you have identified.
   3. If this attack succeeds, try to understand the naming scheme being used for protected static files. If possible, construct an automated attack to trawl for content that may be useful or that may contain sensitive data.
 
 6. Testing Restrictions on HTTP Methods
  Although there may not be a ready means of detection whether an application's access controls make use of platform-level controls over HTTP methods, you can take some simple steps to identify any vulnerabilities.
  HACK STEPS:
   1. Using a high-privileged account, identify some privileged requests that perform sensitive actions, such as adding a new user or chaning a user's security role.
   2. If these requests are not protected by any anti-CSRF tokens or similar features, use the high-privileged account to determine whether the application still carries out the requested action if the HTTP method is modified. Test the following HTTP methods:
    - POST
    - GET
    - HEAD
    - An arbitrary invalid HTTP method
   3. If the application honors any requests using different HTTP methods than the original method, test the access controls over those request using the standard methodology already described, using accounts with lower privileges.

_____________________________________________________________________________________________________
III. Securing Access Controls
 Access controls are one of the easiest areas of web application security to understand, although you must carefully apply a well-informed, thorough methodology when implementing them.
 First, you should avoid several obvious pitfalls. These usually arise from ignorance about the essential requirements of effective access control or flawed assumptions about the kinds of requests that users will make and against which the application needs to defend itself:
  - Do not rely on users’ ignorance of application URLs or the identifiers used to specify application resources, such as account numbers and document IDs. Assume that users know every application URL and identifier, and ensure that the application’s access controls alone are sufficient to prevent unauthorized access.
  - Do not trust any user-submitted parameters to signify access rights (such as admin=true ).
  - Do not assume that users will access application pages in the intended sequence. Do not assume that because users cannot access the Edit Users page, they cannot reach the Edit User X page that is linked from it.
  - Do not trust the user not to tamper with any data that is transmitted via the client. If some user-submitted data has been validated and then is transmitted via the client, do not rely on the retransmitted value without revalidation.
  
 The following represents a best-practice approach to implementing effective access controls within web applications:
  - Explicitly evaluate and document the access control requirements for every unit of application functionality. This needs to include both who can legitimately use the function and what resources individual users may access via the function.
  - Drive all access control decisions from the user’s session.
  - Use a central application component to check access controls.
  - Process every client request via this component to validate that the user making the request is permitted to access the functionality and resources being requested.
  - Use programmatic techniques to ensure that there are no exceptions to the previous point. An effective approach is to mandate that every application page must implement an interface that is queried by the central access control mechanism. If you force developers to explicitly code access control logic into every page, there can be no excuse for omissions.
  - For particularly sensitive functionality, such as administrative pages, you can further restrict access by IP address to ensure that only users from a specific network range can access the functionality, regardless of their login status.
  - If static content needs to be protected, there are two methods of providing access control. First, static files can be accessed indirectly by passing a filename to a dynamic server-side page that implements relevant access control logic. Second, direct access to static fi les can be controlled using HTTP authentication or other features of the application server to wrap the incom-
ing request and check the resource’s permissions before access is granted.
  - Identifiers specifying which resource a user wants to access are vulnerable to tampering whenever they are transmitted via the client. The server should trust only the integrity of server-side data. Any time these identifiers are transmitted via the client, they need to be revalidated to ensure that the user is authorized to access the requested resource.
  - For security-critical application functions such as the creation of a new bill payee in a banking application, consider implementing per-transaction reauthentication and dual authorization to provide additional assurance that the function is not being used by an unauthorized party. This also mitigates the consequences of other possible attacks, such as session hijacking.
  - Log every event where sensitive data is accessed or a sensitive action is performed. These logs will enable potential access control breaches to be detected and investigated.
  
 Web application developers often implement access control functions on a piecemeal basis. They add code to individual pages in cases where some access control is required, and they often cut and paste the same code between pages to implement similar requirements. This approach carries an inherent risk of defects in the resulting access control mechanism. Many cases are overlooked
where controls are required, controls designed for one area may not operate in the intended way in another area, and modifi cations made elsewhere within the application may break existing controls by violating assumptions made by them.
 In contrast to this approach, the previously described method of using a central application component to enforce access controls has many benefits:
  - It increases the clarity of access controls within the application, enabling different developers to quickly understand the controls implemented by others.
  - It makes maintainability more effi cient and reliable. Most changes need to be applied only once, to a single shared component, and do not need to be cut and pasted to multiple locations.
  - It improves adaptability. Where new access control requirements arise, they can be easily reflected within an existing API implemented by each application page.
  - It results in fewer mistakes and omissions than if access control code is implemented piecemeal throughout the application.
 1. A Multilayered Privilege Model
  HACK STEPS:
   If you are attacking an application that employs a multilayered privilege model of this kind, it is likely that many of the most obvious mistakes that are commonly made in applying access controls will be defended against. You may find that circumventing the controls implemented within the application does not get you very far, because of protection in place at other layers. With this in mind, several potential lines of attack are still available to you. Most importantly, understanding the limitations of each type of control, in terms of the protection it does not offer, will help you identify the vulnerabilities that are most likely to affect it:
   - Programmatic checks within the application layer may be susceptible to injection-based attacks.
   - Roles defined at the application server layer are often coarsely defined and may be incomplete.
   - Where application components run using low-privileged operating system accounts, typically they can read many kinds of potentially sensitive data within the host file system. Any vulnerabilities granting arbitrary file access may still be usefully exploited, even if only to read sensitive data.
   - Vulnerabilities within the application server software itself typically enable you to defeat all access controls implemented within the application layer, but you may still have limited access to the database and operating system.
   - A single exploitable access control vulnerability in the right location may still provide a starting point for serious privilege escalation. For example, if you discover a way to modify the role associated with your account, you may find that logging in again with that account gives you enhanced access at both the application and database layers.
 
----------------------------------------------------------------------------------------------------
SUMMARY

 Access control defects can manifest themselves in various ways. In some cases, they may be uninteresting, allowing illegitimate access to a harmless function that cannot be leveraged to escalate privileges any further. In other cases, finding a weakness in access controls can quickly lead to a complete compromise of the application.
 
 Flaws in access control can arise from various sources. A poor application design may make it diffi cult or impossible to check for unauthorized access, a simple oversight may leave only one or two functions unprotected, or defective assumptions about how users will behave can leave the application undefended when those assumptions are violated.
 
 In many cases, fi nding a break in access controls is almost trivial. You simply request a common administrative URL and gain direct access to the functionality. In other cases, it may be very hard, and subtle defects may lurk deep within application logic, particularly in complex, high-security applications. The most important lesson when attacking access controls is to look everywhere. If you are struggling to make progress, be patient, and test every step of every application function. A bug that allows you to own the entire application may be just around the corner.
 
-----------------------------------------------------------------------------------------------------
QUESTIONS

1. An application may use the HTTP Referer header to control access without any overt indication of this in its normal behavior. How can you test for this weakness?

2. You log in to an application and are redirected to the following URL: 
	https://wahh-app.com/MyAccount.php?uid=1241126841 
 The application appears to be passing a user identifier to the MyAccount.php page. The only identifier you are aware of is your own. How can you test whether the application is using this parameter to enforce access controls in an unsafe way?
 
3. A web application on the Internet enforces access controls by examining users’ source IP addresses. Why is this behavior potentially flawed?

4. An application’s sole purpose is to provide a searchable repository of information for use by members of the public. There are no authentication or session-handling mechanisms. What access controls should be implemented within the application?

5. When browsing an application, you encounter several sensitive resources that need to be protected from unauthorized access and that have the .xls file extension. Why should these immediately catch your attention?
 
 
 
 
 
 
 \
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 














 

