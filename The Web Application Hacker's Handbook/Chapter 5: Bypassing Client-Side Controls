Bypassing Client-Side Controls
-----------------------------------------------------------------------------
* Transmitting Data Via the Client
 - Hidden Form Fields
 - HTTP Cookies
 - URL Parameters
 - The Referer Header
  + HACK STEPS:
   1. Locate all instances within the application where hidden form fields, cookies, and URL parameters are apparently being used to transmit data via the client.
   2. Attempt to determine or guess the role that the item plays in the application's logic, based on the context in which it appears and on clues such as the parameter's name.
   3. Modify the item's value in ways that are relevant to its purpose in the application. Ascertain whether the application process arbitrary values submiited in the paramater, and whether this exposes the application to any vulnerabilities.
  
  - Opaque Data
   + HACK STEPS:
    Faced with opaque data being transmitted via the client, serveral avenues of attack are possible:
    1. If you know the value of the plaintext behind the opaque string, you can attempt to decipher the obfuscation algorithm being employed.
    2. As described in Chapter 4, the application may contain functions else-where that you can leverage to return the opaque string resulting from a piece of plaintext you control. In this situation, you may be able to directly obtain the required string to deliver an arbitrary payload to the function you are targeting.
    3. Even if the opaque string is impenetrable, it may be possible to replay its value in other contexts to achieve a malicious effect. For example, the pricing_token parameter in the previously shown form may contain an encrypted version of the product's price. Althought it is not possible to product the encrypted equivalent for an arbitrary price of your choosing, you may be able to copy the encrypted price from a different, cheaper product and submit this in its place.
    4. If all else fails, you can attempt to attack the server-side logic that will decrypt or deobfuscate the opaque string by submitting malformed variations of it - for example, containing overlong values, different character sets, and the like.
    
  - The ASP.NET ViewState
   + HACK STEPS:
    1. If you are attacking an ASP.NET application, verify whether MAC protection is enabled for the ViewState. This is indicated by the presence of a 20-byte hash at the end of the ViewState structure, and you can use the ViewState parser in Burp Suite to confirm whether this is present.
    2. Even if the ViewState is protected, use Burp to decode the ViewState on various application pages to discover whether the application is using the ViewStatie to transmit any sensitive data via the client.
    3. Try to modify the value of a specific parameter within the ViewState without interfering with its structure, and see whether an error message results.
    4. If you can modify the ViewState without causing errors, you should review the function of each parameter within the ViewState and see whether the application uses it to store any custom data. Try to submit crafted values as each parameter to probe for common vulnerabilites, as you would for any other item of data being transmitted via the client.
    5. Note that MAC protection may be enabled or disabled on a per-page basic, so it may be necessary to test each signification page of the application for ViewState hacking vulnerabilities. If you are using Burp Scanner with passive scanning enabled, Burp automatically reports any pages that use the ViewState without MAC protection enabled.
    
-------------------------------------------------------------------------------------
* Capturing User Data: HTML Forms
 - Length Limits
  + HACK STEPS:
   1. Look for form elements containing a maxlength attribute. Submit data that is longer than this length but that is formatted correctly in orther respects (for example, it is numeric if the application expects a number).
   2. If the application accepts the overlong data, you may infer that the client-side validation is not replicated on the server.
   3. Depending on the subsequent processing that the application performs on the parameter, you may be able to leverage the defects in validation to exploit other vulnerabilities, such as SQL injection, cross-site scripting, or buffer overflows.
   
 - Script-Based Validation
  + HACK STEPS:
   1. Identify any cases where client-side JavaScript is used to perform input validation prior to form submission.
   2. Submit data to the server that the validation ordinarily would have blocked, either by modifying the submission request to inject invalid data or by modifying the form validation code to neutralize it.
   3. As with length restrictions, determine whether the client-side controls are replicated on the server and, if not, whether this can be exploited for any malicious purpose.
   4. Note that if multiple input fields are subjected to client-side validation prior to form submission, you need to test each field individually with invalid data while leaving valid values in all the other fields. If you submit invalid data in multiple fields simultaneously, the server might stop processing the form when it identifies the first invalid field. Therefore, your testing won't reach all possible code paths within the application.
   
 - Disabled Elements
  + HACK STEPS:
   1. Look for disabled elements within each form of the application. Whenever you find one, try submitting it to the server along with the form's other parameters to determine whether it has any effect.
   2. Often, submit elements are flagged as disabled so that buttons appear as grayed out in contexts when the relevant action is unavailable. You should always try to submit the names of these elements to determine whether the application performs a server-side check before attempting to carry out the requested action.
   3. Note that browsers do not include disabled form elements when forms are submitted. Therefore, you will not identify these if you simply walk through the application's functionality, monitoring the requests issued by the browser. To identify disabled elements, you need to monitor the server's responses or view the page source in your browser.
   4. You can use the HTML modification feature in Burp Proxy to automatically re-enable any disabled fields used within the application.
   
----------------------------------------------------------------------------
* Capturing User Data: Browser Extensions
 - Common Browser Extension Technologies
  + Java
  + Flash
  + Silverlight
  
 - Approaches to Browser Extensions
  + intercept and modify the requests made by the component and the responses received from the server.
  + target the component itself directly and attempt to decompile its bytecode to view the original source, or interact dynamically with the component using a debugger.
  
 - Intercepting Traffic from Browser Extensions
  + Handling Serialized Data
   _ Java Serialization
   _ Flash Serialization  
   _ Silverlight Seralization
  + Obstaclesto Interceptiong Traffic from Browser Extensions
   _ the client component may not honor the proxy configuration you have specified in your browser or your computer;s settings.	
   _ the client component may no accept the SSL certificate being presented by your interception proxy
   
  + HACK STEPS:
   1. Ensure that your proxy is correctly interception all trafic from the browser extension. If necessary, use a sniffer to identify any traffic that is not begin proxied correctly.
   2. If the client component uses a standard serialization scheme, ensure that you have the tools necessary to unpack and modify it. If the component is using a proprietary encoding or encryption mechanism, you need to decompile or debug the component to fully test it.
   3. Review responses from the server that trigger key clien-side logic. Often timely interception and modification of a server response may allow you to "unlock" the client GUI, making it easy to reveal and then perform complex or multistaged privileged actions.
   4. If the application performs any critical logic or events that the client component should not be trusted to perform (such as drawing a card or rolling dice in a gambling application), look for any correlation between execution of critical logic and communication with the server. If the client does not communicate with the server to determine the outcome of the event, the application is definitely vulnerable.
   
 - Decompiling Browser Extensions
  + Downloading the Bytecode
  + Decompiling the Bytecode
  + Working on the Source Code
   _ Recompiling and Executing Within the Browser
   _ Recompiling and Executing Outside the Browser
   _ Manipulation the Original Component Using JavaScript
   
  + HACK STEPS:
   1. Use the techniques described to download the component's bytecode, unpack it, and decompile it into source code.
   2. Review the relevant source code to understand what processing is being performed.
   3. If the component contains any public methods that can be manipulated to achieve your objective, intercept an HTML response that interacts with the component, and add some JavaScript to invoke the apprpriate methods using your input.
   4. If not, modify the component's source code to achieve your objective, and the recompile it and execute it, either in your browser or as a standalone program.
   5. If the component is being used to submit obfuscated or encrypted data to the server, use your modified version of the component to submit various suitably obfuscated attack strings to the server to probe for vulnerabilities, as you would for any other parameter.
  
  + Coping with Bytecode Obfuscation
   _ HACK STEPS:
    Effective tactics for coping  with bytecode obfuscation depend on the techniques used and the purpose for which you are analyzing the source. Here are some suggestions:
    1. You can review a component for public methods without fully understanding the source. It should be obvious which methods can be invoked from JavaScript, and what their signatures are, enabling you to test the behavior of the methods by passing in various inputs.
    2. If class, method, and member variable names have been replaced with meaningless expressions (nut not special words reserved by the programming language), you can use the refactoring functionality built into many IDEs to help yourself understanding the code. By studying how items are used, you can start to assgin them meaningful names. If you the rename tool within the IDE, it does a lot of work for you, tracing the items's use throughout the codebase and renaming it everywhere.
    3. You can actually undo a lot of obfuscation by running the obfuscated bytecode through an obfuscator a second time and choosing suitable options. A useful obfuscator for Java is Jode. It can remvoe redundant code paths added by another obfuscator and facilitate the process of understanding obfuscated names by assigning globally unique names to items.
    
 - Attaching a Debugger
 - Native Client Components

------------------------------------------------------------------------------------------
* Handling Client-Side Data Securely
 - Transmitting Data Via the Client
 - Validating Client-Generated Data
 - Logging and Alerting
















   
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
