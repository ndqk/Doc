

*********************************************************************************
I. Exploiting Error Messages
	1. Script Erỏ Messages
	2. Stack Traces
	3. Informative Debug Messages
	4. Server and Database Messages
		4.1. Using Information Disclosure to Advance an Attack
		4.2. Cross-Site Scripting Attacks Within Error Messages
		4.3. Decryption Oracles in Information Disclosure
		
		HACK STEPS:
			1. When you are probing the application for common vulnerabilities by submitting crafted attack strings in different parameters, always monitor the application's responses to identify any error messages that may contain useful information.
			Attempt to force an error response from the application by supplying encrypted data strings in the wrong context, or by performing actions on resources that are not in the correct state to handle the action.
			2. Be aware that error information that is returned within the server's response may not be rendered on-screen within the browser. An efficient way to identify many error conditions is to search each raw response for keywords that are often contained in error messages. For example:
					- error
					- exception
					- illegal
					- invalid
					- fail
					- stack
					- access
					- directory
					- file
					- not found
					- varchar
					- ODBC
					- SQL
					- SELECT
			3. When you send a series of requests modifying parameters within a base request, check whether the original response already contains any of the keywords you are looking for to avoid false positives.
			4. You can use the Grep function of Burp Intruder to quickly identify any occurrences of interesting keywords in any of the responses generated by a given attack. Where matches are found, review the relevant responses manually to determine whether any useful error information has been returned.
			
	5. Using Public Information
		HACK STEPS:
			1. Search for the text of any unusual error messages using standard search engines. You can use various advanced search features to narrow down your results. For example:
					"unable to retrieve" filetype:php
			2. Review the search results, looking both for any discussion about the error message and for any other websites in which the same message has appeared. Other applications may produce the same message in a more verbose context, enabling you to better understand what kind of conditions give rise to the error. Use the search engine cache to retrieve examples of error messages that no longer appear within the live application.
			3. Use Google code search to locate any publicly available code that may be responsible for a particular error message. Search for snippets of error messages that may be hard-code into the application's source code. You can also use various advanced search features to specify the code language and other details if these are known. For example:
						unable\ to\ retrieve lang:php package:mail
			4. If you have obtained stack traces containing the names of library and third-party code components, search for these names on both types of search engines.
			
	6. Engineering Informative Error Messages	
	
*************************************************************************************
III. Gathering Published Information
	HACK STEPS:
		1. Review the results of your application mapping exercises to identify all server-side functionality and client-side data that may be used to obtain useful information.
		2. Identify any locations within the application where sensitive data such as passwords or credit card details are transmitted from the server to the browser. Even if these are masked on-screen, they are still viewable within the server's response. If you have found another suitable vulnerability, such as within access controls or session handling, this behavior can be used to obtain the information belonging to other application users.
		3. If you identify any means of extracting sensitive information, use the techniques described in Chapter 14 to automate the process.
		
*************************************************************************************
IV. Using Inference		
	HACK STEPS:
		1. Differences in the timing of application responses may be subtle and difficult to detect. In a typical situation, it is worth probing the application for this behavior only in selected key areas where a crucial item of interesting data is submitted and where the kind of processing being performed is likely to result in time differences.
		2. To test a particular function, compile one list containing several items that are known to be valid (or that have been accessed recently) and a second list containing items that are known to be invalid (or dormant). Make requests containing each item on these lists in a controlled way, issuing only on request at a time, and monitoring the time taken for the application to respond to each request. Determine whether there is any correlation between the item's status and the time taken to respond.
		3. You can use Burp Intruder to automate this task. For every request it generates, Intruder automatically records the time taken before the application responds and the time taken to complete the response. You can sort a table of results by either of these attribute to quickly identify any obvious correlations.
	
*************************************************************************************
V. Preventing Information Leakage
	1. Use Generic Error Messages
	2. Protect Sensitive Information
	3. Minimize Client-Side Information Leakage

*************************************************************************************
SUMMARY


*************************************************************************************
QUESTIONS

1. While probing for SQL injection vulnerabilities, you request the following URL:
				https://wahh-app.com/list.aspx?artist=foo’+having+1%3d1--
				
		You receive the following error message:
				Server: Msg 170, Level 15, State 1, Line 1
				Line 1: Incorrect syntax near ‘having1’.
				
	What can you infer from this? Does the application contain any exploitable condition?
	
2. While you are performing fuzz testing of various parameters, an application returns the following error message:
				Warning: mysql_connect() [function.mysql-connect]: Access denied for
				user ‘premiumdde’@’localhost’ (using password: YES) in
				/home/doau/public_html/premiumdde/directory on line 15
				Warning: mysql_select_db() [function.mysql-select-db]: Access denied
				for user ‘nobody’@’localhost’ (using password: NO) in
				/home/doau/public_html/premiumdde/directory on line 16
				Warning: mysql_select_db() [function.mysql-select-db]: A link to
				the server could not be established in
				/home/doau/public_html/premiumdde/directory on line 16
				Warning: mysql_query() [function.mysql-query]: Access denied for
				user ‘nobody’@’localhost’ (using password: NO) in
				/home/doau/public_html/premiumdde/directory on line 448
				
		What useful items of information can you extract from this?
		
3. While mapping an application, you discover a hidden directory on the server that has directory listing enabled and appears to contain a number of old scripts. Requesting one of these scripts returns the following error message:
				CGIWrap Error: Execution of this script not permitted
				Execution of (contact.pl) is not permitted for the following reason:
				Script is not executable. Issue ‘chmod 755 filename’
				
				Local Information and Documentation:
				CGIWrap Docs: http://wahh-app.com/cgiwrap-docs/
				Contact EMail: helpdesk@wahh-app.com
				
				Server Data:
				Server Administrator/Contact: helpdesk@wahh-app.com
				Server Name: wahh-app.com
				Server Port: 80
				Server Protocol: HTTP/1.1		

				Request Data:
				User Agent/Browser: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT
				5.1; .NET CLR 2.0.50727; FDM; InfoPath.1; .NET CLR 1.1.4322)
				Request Method: GET
				Remote Address: 192.168.201.19
				Remote Port: 57961
				Referring Page: http://wahh-app.com/cgi-bin/cgiwrap/fodd
				
		What caused this error, and what common web application vulnerability should you quickly check for?
		
		
4. You are probing the function of a request parameter in an attempt to determine its purpose within an application. You request the following URL:
				https://wahh-app.com/agents/checkcfg.php?name=admin&id=13&log=1
				
		The application returns the following error message:
				Warning: mysql_connect() [function.mysql-connect]: Can’t connect to
				MySQL server on ‘admin’ (10013) in
				/var/local/www/include/dbconfig.php on line 23
				
		What caused this error message, and what vulnerabilities should you probe for as a result?
		
5. While fuzzing a request for various categories of vulnerabilities, you submit a single quotation mark within each request parameter in turn. One of the results contains an HTTP 500 status code, indicating potential SQL injection. You check the full contents of the message, which are as follows:
				Microsoft VBScript runtime error ‘800a000d’
				Type mismatch: ‘ [string: “’”]’
				/scripts/confirmOrder.asp, line 715
		Is the application vulnerable?		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
